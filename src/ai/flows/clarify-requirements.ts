// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview A flow to clarify ambiguous voice commands with the user.
 *
 * - clarifyRequirements - A function that takes a potentially ambiguous command and clarifies it with the user.
 * - ClarifyRequirementsInput - The input type for the clarifyRequirements function.
 * - ClarifyRequirementsOutput - The return type for the clarifyRequirements function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const ClarifyRequirementsInputSchema = z.object({
  command: z.string().describe('The potentially ambiguous voice command.'),
  clarificationType: z.enum(['direction', 'distance', 'angle', 'none']).describe('The type of clarification needed.'),
});
export type ClarifyRequirementsInput = z.infer<typeof ClarifyRequirementsInputSchema>;

const ClarifyRequirementsOutputSchema = z.object({
  clarifiedCommand: z.string().describe('The clarified voice command after asking clarifying questions.'),
  isComplete: z.boolean().describe('Whether the command is now complete and ready for execution.'),
});
export type ClarifyRequirementsOutput = z.infer<typeof ClarifyRequirementsOutputSchema>;

export async function clarifyRequirements(input: ClarifyRequirementsInput): Promise<ClarifyRequirementsOutput> {
  return clarifyRequirementsFlow(input);
}

const clarifyRequirementsPrompt = ai.definePrompt({
  name: 'clarifyRequirementsPrompt',
  input: {
    schema: z.object({
      command: z.string().describe('The potentially ambiguous voice command.'),
      clarificationType: z.enum(['direction', 'distance', 'angle', 'none']).describe('The type of clarification needed.'),
    }),
  },
  output: {
    schema: z.object({
      clarifiedCommand: z.string().describe('The clarified voice command after asking clarifying questions.'),
      isComplete: z.boolean().describe('Whether the command is now complete and ready for execution.'),
    }),
  },
  prompt: `You are a helpful AI assistant that helps clarify ambiguous voice commands from the user.

The user has given the following voice command: {{{command}}}
The type of clarification needed is: {{{clarificationType}}}

Based on the clarification type, ask the appropriate clarifying question:

For 'direction':
- If the command involves turning but direction is unclear, ask "Which direction should I turn, left or right?"
- If the command involves moving but direction is unclear, ask "Which direction should I move?"

For 'angle':
- If turning but angle is unclear, ask "How many degrees should I turn?"

For 'distance':
- If moving but distance is unclear, ask "How far should I move?"

For 'none':
- Simply confirm the command is clear and ready for execution

Example responses:
1. For command "turn" with clarificationType "direction":
{
  "clarifiedCommand": "turn",
  "isComplete": false,
  "feedback": "Which direction should I turn, left or right?"
}

2. For command "turn left" with clarificationType "none":
{
  "clarifiedCommand": "turn left 90 degrees",
  "isComplete": true,
  "feedback": "Turning left 90 degrees"
}

3. For command "move" with clarificationType "distance":
{
  "clarifiedCommand": "move",
  "isComplete": false,
  "feedback": "How far should I move?"
}

Provide a response that includes both the clarifying question and whether the command is now complete.
`,
});

const clarifyRequirementsFlow = ai.defineFlow<
  typeof ClarifyRequirementsInputSchema,
  typeof ClarifyRequirementsOutputSchema
>({
  name: 'clarifyRequirementsFlow',
  inputSchema: ClarifyRequirementsInputSchema,
  outputSchema: ClarifyRequirementsOutputSchema,
},
async input => {
  const {output} = await clarifyRequirementsPrompt(input);
  return output!;
});

